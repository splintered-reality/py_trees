#!/usr/bin/env python
#
# License: Yujin
#
#
##############################################################################
# Documentation
##############################################################################
"""
Simple utility to watch and display items from Blackboard
"""
##############################################################################
# Imports
##############################################################################

from py_trees_msgs.srv import BlackboardVariables, SubBlackboardWatch
import argparse
import rospy
import rocon_console.console as console
import sys
import std_msgs.msg as std_msgs


##############################################################################
# Command Handler
##############################################################################


def show_usage():
    s = "\n"
    s += console.bold + "    Introspection" + console.reset + "\n"
    s += console.cyan + "        gopher_blackboard" + console.yellow + " [option]" + console.reset + "\n"
    s += "\n"
    s += "        where the option is one of:\n"
    s += console.cyan + "        --list_variables                       " + console.yellow + "list variables in the blackboard." + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Command" + console.reset + "\n"
    s += console.cyan + "        gopher_blackboard" + console.yellow + " <command>" + console.blue + console.bold + " [<variables>]" + console.reset + "\n"
    s += "\n"
    s += "        where the command is one of:\n"
    s += console.cyan + "        watch    " + console.blue + "<topic name> [<variables>]    " + console.yellow + "watch specified variables." + console.reset + "\n"
    s += "\n"
    return s


def show_description():
    s = ""
    s += console.green + "Watch and log the blackboard!" + console.reset
    return s


def parse_arguments(command_line_args):
    parser = argparse.ArgumentParser(description=show_description(),
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.RawTextHelpFormatter
                                     )
    parser.add_argument('-lv', '--list_variables', action='store_true', default=None, help='list variables in the blackboard.')
    parser.add_argument('command', nargs=argparse.REMAINDER, default=None, help='subcommand to run')

    args = parser.parse_args(command_line_args)
    return args


class WatchBlackboard(object):
    def __init__(self, command_line_args):
        args = parse_arguments(command_line_args)
        self.handle_args(args)

    def pretty_print_variables(self, variables):
        s = "\n"
        s += console.bold + console.cyan + "Blackboard Variables:" + console.reset + console.yellow + "\n"
        for variable in variables:
            s += "    " + variable + "\n"
        print "%s" % s

    def echo_sub_blackboard(self, sub_blackboard):
        print "%s" % sub_blackboard.data

    def handle_args(self, args):
        if args.list_variables:
            list_variable_service = '/behaviours/blackboard_list_variables'
            try:
                rospy.wait_for_service(list_variable_service, timeout=3.0)
                try:
                    list_variables = rospy.ServiceProxy(list_variable_service, BlackboardVariables)
                    recieved_variables = list_variables()
                    self.pretty_print_variables(recieved_variables.variables)
                except rospy.ServiceException, e:
                    print "Service call failed: %s" % e
            except rospy.exceptions.ROSException, e:
                print "Error: ", e
        else:
            if not args.command:
                print(console.red + "\nError: no command provided" + console.reset)
                print("%s" % show_usage())
            else:
                if args.command[0] == 'watch':
                    if len(args.command) < 3:
                        print(console.red + "\nError: Incorrect number of arguments provided, aborting.\n" + console.reset)
                    else:
                        topic = args.command[1]
                        variables = args.command[2:]
                        variables = [variable.strip(',[]') for variable in variables]

                        sub_blackboard_watch_service = '/behaviours/sub_blackboard_watch'
                        try:
                            rospy.wait_for_service(sub_blackboard_watch_service, timeout=3.0)
                            try:
                                sub_blackboard_watch_service = rospy.ServiceProxy(sub_blackboard_watch_service, SubBlackboardWatch)
                                recieved_topic = sub_blackboard_watch_service(topic, variables)
                            except rospy.ServiceException, e:
                                print "Service call failed: %s" % e

                            rospy.init_node('sub_blackblack_' + topic)
                            print(console.blue + "..Echoing Subblackboard " + topic + " with variables " + str(variables) + "..\n" + console.reset)
                            rospy.Subscriber(recieved_topic.topic, std_msgs.String, self.echo_sub_blackboard)
                            rospy.spin()
                        except rospy.exceptions.ROSException, e:
                            print "Error: ", e
                else:
                    print(console.red + "\nError: unrecognised command, aborting.\n" + console.reset)


##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    WatchBlackboard(command_line_args)
